{"version":3,"sources":["assets/after_noon.png","assets/night.png","styles.js","App.js","index.js"],"names":["StyledWrapper","styled","div","StyledInputWrapper","StyledInput","input","StyledResults","StyledNoData","StyledWeather","timeOfDay","night","after_noon","StyledMainWeather","StyledAdditionalWeather","APIkey","localData","require","currentHour","Date","getHours","App","useState","inputWord","setInputWord","weatherData","setWeatherData","emptyCartMsg","setEmptyCartMsg","handleApi","filteredItem","a","API","item","id","fetch","response","status","json","data","console","error","filterResults","filter","name","toLowerCase","includes","type","placeholder","onChange","e","target","value","maxLength","onBlur","setTimeout","onKeyPress","key","length","map","onClick","country","main","sys","weather","description","Math","round","temp","temp_max","temp_min","pressure","sunrise","getMinutes","sunset","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g+gmSAAe,MAA0B,uCCA1B,MAA0B,kCCI5BA,EAAgBC,IAAOC,IAAV,6IAQbC,EAAqBF,IAAOC,IAAV,6FAMlBE,EAAcH,IAAOI,MAAV,oYAsBXC,EAAgBL,IAAOC,IAAV,0hBAiCbK,EAAeN,IAAOC,IAAV,oFAQZM,EAAgBP,IAAOC,IAAV,sfAYJ,gBAAGO,EAAH,EAAGA,UAAH,MAClB,cAAAA,EAAY,GAAYC,EAAkBC,EAA1C,QAcSC,EAAoBX,IAAOC,IAAV,0SAsBjBW,EAA0BZ,IAAOC,IAAV,kL,OCtH9BY,EAAS,mCACTC,EAAYC,EAAQ,IACpBC,GAAc,IAAIC,MAAOC,WAuGhBC,EArGH,WACV,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwCJ,mBAAS,yBAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMC,EAAS,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACVC,EAAMF,EAAY,6DACkCA,EAAaG,KAAKC,GADpD,+BAC6EnB,GAD7E,4DAEiCQ,EAFjC,+BAEiER,GAHzE,kBAMSoB,MAAMH,GANf,cAOU,OADlBI,EANQ,QAODC,QACXT,EAAgB,kCARJ,SAUGQ,EAASE,OAVZ,OAUVC,EAVU,OAWdb,EAAea,GAXD,kDAadC,QAAQC,MAAR,gCAA6B,KAAIJ,SAbnB,QAehBb,EAAa,IAfG,0DAAH,sDAkBTkB,EAAgB1B,EAAU2B,QAAO,SAACV,GAAD,OACrCA,EAAKW,KAAKC,cAAcC,SAASvB,EAAUsB,kBAG7C,OACE,mCACE,eAAC5C,EAAD,WACE,eAACG,EAAD,WACE,cAACC,EAAD,CACE0C,KAAK,OACLC,YAAY,WACZC,SAAU,SAACC,GAAD,OAAO1B,EAAa0B,EAAEC,OAAOC,QACvCA,MAAO7B,EACP8B,UAAW,GACXC,OAAQ,kBAAMC,YAAW,kBAAM/B,EAAa,MAAK,MACjDgC,WAAY,SAACN,GACG,UAAVA,EAAEO,KACJ5B,OAKLN,EAAUmC,OAAS,EAClB,cAACnD,EAAD,UACE,6BACGmC,EAAcgB,OACbhB,EAAciB,KAAI,SAAC1B,EAAMwB,GAAP,OAChB,qBAAcG,QAAS,kBAAM/B,EAAU,CAAEI,UAAzC,UACGA,EAAKW,KADR,KACgBX,EAAK4B,UADZJ,MAKX,4BAAIlC,QAKV,MAIJ,cAACd,EAAD,CAAeC,UAAWQ,EAA1B,SAC8B,oBAApBO,EAAYqC,KAClB,qCACE,eAACjD,EAAD,WACE,+BACGY,EAAYmB,KADf,KACuBnB,EAAYsC,IAAIF,WAEvC,4BAAIpC,EAAYuC,QAAQ,GAAGC,cAC3B,+BAAKC,KAAKC,MAAM1C,EAAYqC,KAAKM,MAAjC,YACA,sCACQF,KAAKC,MAAM1C,EAAYqC,KAAKO,UADpC,cAC2D,IACxDH,KAAKC,MAAM1C,EAAYqC,KAAKQ,UAF/B,eAKF,eAACxD,EAAD,WACE,2CAAcW,EAAYqC,KAAKS,SAA/B,UACA,6CACY,IAAIpD,KAA+B,IAA1BM,EAAYsC,IAAIS,SAAgBpD,WADrD,IAEI,IAAID,KAA+B,IAA1BM,EAAYsC,IAAIS,SAAgBC,gBAE7C,4CACW,IAAItD,KAA8B,IAAzBM,EAAYsC,IAAIW,QAAetD,WADnD,IAEG,IAAID,KAA8B,IAAzBM,EAAYsC,IAAIW,QAAeD,sBAK/C,cAACjE,EAAD,UACE,4BAAImB,cCvGlBgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.10176485.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/after_noon.14e9d22b.png\";","export default __webpack_public_path__ + \"static/media/night.bb975013.png\";","import styled from 'styled-components';\r\nimport after_noon from './assets/after_noon.png';\r\nimport night from './assets/night.png';\r\n\r\nexport const StyledWrapper = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const StyledInputWrapper = styled.div`\r\n  margin-top: 20px;\r\n  max-width: 400px;\r\n  position: relative;\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n  width: 400px;\r\n  padding: 15px 10px;\r\n  box-shadow: 0px 5px 25px -4px rgb(0 0 0 / 50%);\r\n  border: 1px solid white;\r\n  font-size: 1rem;\r\n  transition: background 0.2s ease;\r\n\r\n  ::placeholder {\r\n    color: black;\r\n  }\r\n\r\n  :focus {\r\n    background-color: #d6d6d6;\r\n    outline: none;\r\n    color: black;\r\n  }\r\n  :focus::placeholder {\r\n    color: black;\r\n  }\r\n`;\r\n\r\nexport const StyledResults = styled.div`\r\n  max-width: 400px;\r\n  max-height: 400px;\r\n  width: 100%;\r\n  overflow: auto;\r\n  border: 1px solid white;\r\n  color: black;\r\n  position: absolute;\r\n  background-color: #d6d6d6;\r\n  box-shadow: 0px 10px 20px -5px rgb(0 0 0 / 50%);\r\n\r\n  ul {\r\n    list-style: none;\r\n    user-select: none;\r\n    padding-left: 0;\r\n    margin: 5px 0;\r\n  }\r\n\r\n  li {\r\n    cursor: pointer;\r\n    padding: 10px 0;\r\n    padding-left: 10px;\r\n  }\r\n\r\n  li:hover {\r\n    background-color: lightblue;\r\n  }\r\n\r\n  p {\r\n    padding-left: 10px;\r\n  }\r\n`;\r\n\r\nexport const StyledNoData = styled.div`\r\n  height: 450px;\r\n\r\n  p {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\n\r\nexport const StyledWeather = styled.div`\r\n  @keyframes appear {\r\n    0% {\r\n      opacity: 0;\r\n    }\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  margin-top: 1rem;\r\n  border-radius: 10px;\r\n  background-image: ${({ timeOfDay }) =>\r\n    timeOfDay > 18 ? `url(${night})` : `url(${after_noon})`};\r\n  background-position: center;\r\n  max-width: 400px;\r\n  height: 450px;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  text-shadow: 2px 3px 5px rgb(0 0 0 / 35%);\r\n  box-shadow: 0px 10px 20px -5px rgb(0 0 0 / 50%);\r\n`;\r\n\r\nexport const StyledMainWeather = styled.div`\r\n  animation: appear 0.5s ease;\r\n\r\n  h2 {\r\n    margin-bottom: 0;\r\n    font-size: 2rem;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 3rem;\r\n    margin: 0;\r\n    padding: 0;\r\n    text-align: center;\r\n  }\r\n\r\n  p {\r\n    text-align: center;\r\n    margin-top: 0;\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\n\r\nexport const StyledAdditionalWeather = styled.div`\r\n  animation: appear 0.5s ease;\r\n  margin-bottom: 2rem;\r\n\r\n  p {\r\n    padding: 1rem;\r\n    text-align: center;\r\n  }\r\n  span {\r\n    padding: 1rem;\r\n  }\r\n`;\r\n","import { useState } from 'react';\nimport {\n  StyledWrapper,\n  StyledInputWrapper,\n  StyledInput,\n  StyledResults,\n  StyledWeather,\n  StyledNoData,\n  StyledMainWeather,\n  StyledAdditionalWeather,\n} from './styles.js';\n\nconst APIkey = 'e6a65be06f3391d4b113444a0540b1dc';\nconst localData = require('./data/current.city.list.min.json');\nconst currentHour = new Date().getHours();\n\nconst App = () => {\n  const [inputWord, setInputWord] = useState('');\n  const [weatherData, setWeatherData] = useState({});\n  const [emptyCartMsg, setEmptyCartMsg] = useState('Enter city name above');\n\n  const handleApi = async (filteredItem) => {\n    const API = filteredItem\n      ? `https://api.openweathermap.org/data/2.5/weather?id=${filteredItem.item.id}&units=metric&appid=${APIkey}`\n      : `https://api.openweathermap.org/data/2.5/weather?q=${inputWord}&units=metric&appid=${APIkey}`;\n\n    try {\n      const response = await fetch(API);\n      if (response.status === 404) {\n        setEmptyCartMsg('City name not found, try again');\n      }\n      let data = await response.json();\n      setWeatherData(data);\n    } catch (err) {\n      console.error(`błąd w Api: ${err.status}`);\n    }\n    setInputWord('');\n  };\n\n  const filterResults = localData.filter((item) =>\n    item.name.toLowerCase().includes(inputWord.toLowerCase())\n  );\n\n  return (\n    <>\n      <StyledWrapper>\n        <StyledInputWrapper>\n          <StyledInput\n            type=\"text\"\n            placeholder=\"Search..\"\n            onChange={(e) => setInputWord(e.target.value)}\n            value={inputWord}\n            maxLength={30}\n            onBlur={() => setTimeout(() => setInputWord(''), 100)}\n            onKeyPress={(e) => {\n              if (e.key === 'Enter') {\n                handleApi();\n              }\n            }}\n          />\n\n          {inputWord.length > 2 ? (\n            <StyledResults>\n              <ul>\n                {filterResults.length ? (\n                  filterResults.map((item, key) => (\n                    <li key={key} onClick={() => handleApi({ item })}>\n                      {item.name}, {item.country}\n                    </li>\n                  ))\n                ) : (\n                  <p>{inputWord}</p>\n                )}\n              </ul>\n            </StyledResults>\n          ) : (\n            ''\n          )}\n        </StyledInputWrapper>\n\n        <StyledWeather timeOfDay={currentHour}>\n          {typeof weatherData.main != 'undefined' ? (\n            <>\n              <StyledMainWeather>\n                <h2>\n                  {weatherData.name}, {weatherData.sys.country}\n                </h2>\n                <p>{weatherData.weather[0].description}</p>\n                <h3>{Math.round(weatherData.main.temp)}&#8451;</h3>\n                <p>\n                  Max: {Math.round(weatherData.main.temp_max)}&#8451; Min:{' '}\n                  {Math.round(weatherData.main.temp_min)}&#8451;\n                </p>\n              </StyledMainWeather>\n              <StyledAdditionalWeather>\n                <p>Pressure: {weatherData.main.pressure} hPa</p>\n                <span>\n                  Sunrise: {new Date(weatherData.sys.sunrise * 1000).getHours()}\n                  :{new Date(weatherData.sys.sunrise * 1000).getMinutes()}\n                </span>\n                <span>\n                  Sunset: {new Date(weatherData.sys.sunset * 1000).getHours()}:\n                  {new Date(weatherData.sys.sunset * 1000).getMinutes()}\n                </span>\n              </StyledAdditionalWeather>\n            </>\n          ) : (\n            <StyledNoData>\n              <p>{emptyCartMsg}</p>\n            </StyledNoData>\n          )}\n        </StyledWeather>\n      </StyledWrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}